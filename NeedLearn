spring AOP做切面配置
http://www.blogjava.net/supercrsky/articles/174368.html

一、Spring AOP 概念：
1、 join point（连接点）： 程序执行时某个精确特定的点，是一个抽象的概念。
2、 point cut（切入点）： 本质上是一个捕获连接点的结构。在AOP中，可以定义一个point cut，来捕获相关方法的调用；
            在满足这个切入点规则的连接点上执行advice（通知）。
3、advice（通知）：是point cut的执行代码，是执行“方面”的具体逻辑。具体包括：“around”、“before”和“after”等通知。
4、aspect（方面）：point cut和advice结合起来就是aspect，它类似于OOP中定义的一个类，但它代表的更多是对象间横向的关系。
5、introduce（引入）：为对象引入附加的方法或属性，从而达到修改对象结构的目的。有的AOP工具又将其称为mixin。
6、Target Object（目标对象）：被一个或多个切面所通知或代理的对象，即被通知的对象。
7、AOP Proxy（AOP代理）：AOP创建的对象，用来实现切面契约（aspect contract）（包括通知方法执行等功能）；
           spring的动态代理方式包括：JDK的动态代理（面向接口开发的代理，生成一个实现目标对象所实现的接口的代理类）
           及CGLIB动态代理（生成一个继承目标对象的代理类）
8、织入（Weaving）： 把切面（aspect）连接到其它的应用程序类型或者对象上，并创建一个被通知（advised）的对象。 
           这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成。 Spring和其他纯Java AOP框架一样，在运行时完成织入
